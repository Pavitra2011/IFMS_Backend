package com.snipe.ifms.admin.dto;
import java.time.LocalDate;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import com.snipe.ifms.admin.domain.RoleManagementDomain;

import jakarta.persistence.FetchType;
import jakarta.persistence.ManyToOne;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Past;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
public class UserManagementDTO {

    private Long userId; // ID can be auto-generated by the system

    @NotBlank(message = "User name cannot be null")
    @Size(min = 1, max = 255, message = "User name must be between 1 and 255 characters")
    private String userName;

    @NotBlank(message = "Email cannot be blank")
    @Email(message = "Email should be valid")
    @Size(max = 255, message = "Email must be less than 255 characters")
    private String mailId;

    @Pattern(regexp = "\\d{10}", message = "Phone number must be exactly 10 digits")
    private String phone;

    @NotBlank(message = "Gender cannot be blank")
    @Size(min = 1, max = 50, message = "Gender must be between 1 and 50 characters")
    private String gender;

 
    
    
    //private String role; // Change from roleId to roleName
    private String role; // This is the new field you should add


    @NotBlank(message = "Status cannot be blank")
    private String status;

    @Size(max = 255, message = "Address must be less than 255 characters")
    private String address;

    @NotNull(message = "Date of birth cannot be blank")
    @Past(message = "Date of birth must be a past date")
    private LocalDate dateOfBirth;

    @CreationTimestamp   
    private LocalDate dateCreated;

    @UpdateTimestamp
       private LocalDate dateModified;

}
